## Stockage Local des Données : Les données seront stockées localement et 
## incluses dans le projet pour faciliter les tests.

import yfinance as yf
import pandas as pd
import os
import matplotlib.pyplot as plt

dossier = "donnees_historiques"
# Fonction pour charger les données historiques depuis Yahoo Finance et les
# enregistrer dans notre repertoire local.

def charger_donnees_yahoo(tickers, debut, fin):
    # Dictionnaire pour stocker les données de chaque actif
    data = {}
    
    # Créer le répertoire s'il n'existe pas déjà
    if not os.path.exists(dossier):
        os.makedirs(dossier)

    # Récupérer les données pour chaque ticker
    for ticker in tickers:
        data[ticker] = yf.download(ticker, start=debut, end=fin)
        # Enregistrer les données dans un fichier CSV dans le répertoire spécifié
        chemin_fichier = os.path.join(dossier, f"{ticker}.csv")
        data[ticker].to_csv(chemin_fichier)

        print(f"Données de l'actif {ticker} chargées depuis Yahoo Finance")
    
    return data

# Liste des tickers des actifs à télécharger
tickers = ['GOOG','AAPL']

# Période de début et de fin pour les données historiques
debut = '2023-01-01'
fin = '2023-12-31'

# Charger les données historiques depuis Yahoo Finance
donnees = charger_donnees_yahoo(tickers, debut, fin)

## Analyse d’Un Actif : Le backtester se concentrera sur un seul actif avec des positions 
## variant entre -100% et 100%.

# Fonction pour charger les données historiques depuis des fichiers CSV locaux
def charger_donnees_locales(dossier):
    # Dictionnaire pour stocker les données de chaque actif
    data = {}
    
    # Liste des fichiers dans le dossier spécifié
    fichiers = os.listdir(dossier)
    
    # Charger les données de chaque fichier CSV dans le dossier
    for fichier in fichiers:
        if fichier.endswith('.csv'):
            nom_actif = fichier[:-4]  # Retirer l'extension .csv pour obtenir le nom de l'actif
            chemin_fichier = os.path.join(dossier, fichier)
            data[nom_actif] = pd.read_csv(chemin_fichier, parse_dates=['Date'], index_col='Date', decimal='.')
            print(f"Données de l'actif {nom_actif} chargées depuis {chemin_fichier}")
    
    return data

# Fonction pour implémenter la logique de la stratégie de trading pour plusieurs actifs
def strategie_trading_multiactifs(data):
    # Initialiser un DataFrame vide pour stocker les signaux de trading pour chaque actif
    all_signals = {}
    
    # Parcourir chaque actif et appliquer la stratégie de trading
    for nom_actif, data_actif in data.items():
        # Créer un DataFrame de signaux pour l'actif actuel
        signals = pd.DataFrame(index=data_actif.index)
        signals['Position'] = 0  # Initialiser toutes les positions à zéro
        
        # Générer les signaux d'achat et de vente en fonction de la stratégie pour l'actif actuel
        signals['Position'][data_actif['Close'] > data_actif['Close'].rolling(50).mean()] = 1  # Acheter
        
        # Ajouter les signaux de trading de l'actif actuel au dictionnaire global
        all_signals[nom_actif] = signals
    
    return all_signals



# Fonction pour simuler l'exécution des transactions
def simuler_transactions(signals):
    # Simuler l'exécution des transactions pour tous les actifs
    for nom_actif, transactions_actif in signals.items():
        # Mettre à jour les signaux de trading pour l'actif actuel
        transactions_actif['Position'] = transactions_actif['Position'].fillna(0)  # Remplacer les valeurs NaN par 0
        transactions_actif['Position'] = transactions_actif['Position'].replace(0, -1)  # Remplacer les positions neutres par -1
    
    return signals

# Dossier contenant les données historiques
dossier_stockage = "donnees_historiques"

# Charger les données historiques depuis les fichiers CSV locaux
donnees = charger_donnees_locales(dossier_stockage)

# Exemple d'utilisation des données chargées pour un actif
nom_actif = list(donnees.keys())[0]
data_actif = donnees[nom_actif]
print(data_actif.head())
print(type(data_actif))
print(data_actif['Close'].dtype)

# Implémenter la logique de la stratégie de trading
signals = strategie_trading_multiactifs(donnees)

# Simuler l'exécution des transactions
transactions_actif = simuler_transactions(signals)

# Afficher les signaux de trading
print("Signaux de trading pour l'actif", nom_actif)
print(transactions_actif)

## Résultats : Génération d’un graphique représentant la performance de la stratégie 
## sur la période choisie, accompagné de statistiques de base telles que le rendement moyen, 
## la variance, et le bêta.

# Fonction pour calculer la performance de la stratégie
def calculer_performance(data, signals):
    # Dictionnaire pour stocker les rendements cumulés de chaque actif
    all_cumulative_returns = {}
    
    # Parcourir chaque actif et calculer sa performance
    for nom_actif, data_actif in data.items():
        # Supprimer les valeurs NaN du DataFrame de signaux pour l'actif actuel
        signals_actif = signals[nom_actif].dropna()
        
        # Calculer le rendement quotidien en multipliant les signaux par le rendement quotidien des données
        signals_actif['Return'] = signals_actif['Position'] * data_actif['Close'].pct_change()
        
        # Supprimer les valeurs manquantes
        signals_actif = signals_actif.dropna()
        
        # Calculer le rendement cumulé pour l'actif actuel
        cumulative_return = (signals_actif['Return'] + 1).cumprod() - 1
        
        # Stocker le rendement cumulé dans le dictionnaire global
        all_cumulative_returns[nom_actif] = cumulative_return
    
    return signals, all_cumulative_returns

# Fonction pour afficher les statistiques de base et générer le graphique de performance
def afficher_statistiques_et_graphique(data, performances):
    for nom_actif, cumulative_return in performances.items():
        # Calculer les statistiques de base
        mean_return = cumulative_return.mean()
        variance = cumulative_return.var()
        # Calcul du bêta (à ajouter)
    
        # Afficher les statistiques avec le graphique de performance
        plt.figure(figsize=(10, 6))
        plt.plot(cumulative_return.index, cumulative_return, label='Performance de la stratégie')
        plt.xlabel('Date')
        plt.ylabel('Performance')
        plt.title(f'Performance de la stratégie au fil du temps pour {nom_actif}')
        plt.legend()
        plt.grid(True)
    
        plt.text(cumulative_return.index[-1], cumulative_return.iloc[-1], f'Rendement moyen : {mean_return:.2%}\nVariance : {variance:.2%}',
                verticalalignment='bottom', horizontalalignment='right')
    
        plt.show()

def obtenir_benchmark_returns(benchmark_ticker, debut, fin):
    benchmark_data = yf.download(benchmark_ticker, start=debut, end=fin)
    benchmark_returns = benchmark_data['Close'].pct_change().dropna()
    return benchmark_returns

# Ticker du benchmark (par exemple, S&P 500)
benchmark_ticker = '^GSPC'

# Période de début et de fin pour les données du benchmark
debut = '2023-01-01'
fin = '2023-12-31'

# Obtenir les rendements du benchmark
benchmark_returns = obtenir_benchmark_returns(benchmark_ticker, debut, fin)
print(benchmark_returns)

# Fonction pour calculer les statistiques avancées
def calculer_statistiques_avancees(data, benchmark_returns):
    statistics = {}
    for nom_actif, data_actif in data.items():
        # Calculer les rendements quotidiens
        data_actif['Return'] = data_actif['Close'].pct_change()
        
        # Calculer le rendement du portefeuille
        data_actif['Portfolio_Return'] = data_actif['Return'] * signals[nom_actif]['Position'].shift(1)
        
        # Calculer le rendement excédentaire par rapport au benchmark
        data_actif['Excess_Return'] = data_actif['Portfolio_Return'] - benchmark_returns
        
        # Calculer le bêta en hausse et en baisse
        up_beta = data_actif[data_actif['Excess_Return'] > 0]['Excess_Return'].cov(benchmark_returns[benchmark_returns> 0]) / benchmark_returns[benchmark_returns > 0].var()
        down_beta = data_actif[data_actif['Excess_Return'] < 0]['Excess_Return'].cov(benchmark_returns[benchmark_returns < 0]) / benchmark_returns[benchmark_returns < 0].var()
        
        # Calculer le drawdown maximal
        data_actif['Cumulative_Return'] = (1 + data_actif['Portfolio_Return']).cumprod()
        data_actif['Drawdown'] = 1 - data_actif['Cumulative_Return'] / data_actif['Cumulative_Return'].cummax()
        max_drawdown = data_actif['Drawdown'].max()
        
        # Stocker les statistiques
        statistics[nom_actif] = {
            'Up_Beta': up_beta,
            'Down_Beta': down_beta,
            'Max_Drawdown': max_drawdown
        }
    
    return statistics

# Calculer la performance de la stratégie
transactions_actif, cumulative_return = calculer_performance(donnees, transactions_actif)

# Calculer les statistiques avancées
advanced_statistics = calculer_statistiques_avancees(donnees, benchmark_returns)
print(advanced_statistics)

# Afficher les statistiques de base et générer le graphique de performance
afficher_statistiques_et_graphique(donnees,cumulative_return)
